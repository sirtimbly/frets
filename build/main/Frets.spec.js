"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const frets_1 = require("frets");
const maquette_1 = require("maquette");
const maquette_query_1 = require("maquette-query");
var SimpleScreens;
(function (SimpleScreens) {
    SimpleScreens[SimpleScreens["Start"] = 0] = "Start";
    SimpleScreens[SimpleScreens["End"] = 1] = "End";
    SimpleScreens[SimpleScreens["Home"] = 2] = "Home";
    SimpleScreens[SimpleScreens["About"] = 3] = "About";
})(SimpleScreens || (SimpleScreens = {}));
class SimpleProps extends frets_1.PropsWithFields {
    constructor() {
        super(...arguments);
        this.messages = [];
        this.checkValue = 0;
    }
}
// tslint:disable-next-line:max-classes-per-file
class SimpleActions extends frets_1.ActionsWithFields {
}
ava_1.default("FRETS initializes with simple types", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    t.truthy(F.render);
});
ava_1.default("renders default div", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    t.true(proj.query("div#default").exists());
});
ava_1.default("actions change state", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.actions.changeState = F.registerAction((e, props) => {
        props.messages = ["test"];
        return props;
    });
    F.registerView((app) => {
        return maquette_1.h("div", [
            maquette_1.h("button", { onclick: app.actions.changeState }, ["Load Messages"]),
            maquette_1.h("ul", app.modelProps.messages.map((x) => maquette_1.h("li", [x.toString()]))),
        ]);
    });
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    const list = proj.query("ul");
    t.falsy(list.children.length);
    const button = proj.query("button");
    t.truthy(button.exists);
    button.simulate.click();
    t.truthy(list.children.length);
    t.falsy(list.children[0].children);
    t.is(list.children[0].text, "test");
});
ava_1.default("change state but validator stops mutation", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.validator = (newProps, oldProps) => {
        if (newProps.checkValue < 0) {
            return [Object.assign({}, newProps, { messages: ["Invalid"] }), false];
        }
        return [newProps, true];
    };
    F.actions.setValid = F.registerAction((e, props) => {
        props.checkValue = 1;
        return props;
    });
    F.actions.setInvalid = F.registerAction((e, props) => {
        props.checkValue = -1;
        return props;
    });
    F.registerView((app) => {
        return maquette_1.h("div", [
            maquette_1.h("button#valid", { onclick: app.actions.setValid }, ["Set to 1"]),
            maquette_1.h("button#invalid", { onclick: app.actions.setInvalid }, ["Set to -1"]),
            maquette_1.h("ul", app.modelProps.messages.map((x) => maquette_1.h("li", [x.toString()]))),
        ]);
    });
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    const list = proj.query("ul");
    t.falsy(list.children.length);
    const button1 = proj.query("button#valid");
    const button2 = proj.query("button#invalid");
    button1.simulate.click();
    t.falsy(list.children.length);
    button2.simulate.click();
    t.is(list.children[0].text, "Invalid");
});
ava_1.default("state updates async", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.registerView((app) => {
        setTimeout(() => {
            const p = Object.assign({}, app.modelProps);
            p.messages = ["async"];
            F.render(p);
            const proj2 = maquette_query_1.createTestProjector(F.stateRenderer);
            const list2 = proj2.query("ul");
            t.truthy(list2.children.length);
            t.is(list2.children[0].text, "async");
        }, 50);
        return maquette_1.h("div", [
            maquette_1.h("button", { onclick: app.actions.changeState }, ["Load Messages"]),
            maquette_1.h("ul", app.modelProps.messages.map((x) => maquette_1.h("li", [x.toString()]))),
        ]);
    });
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    const list = proj.query("ul");
    t.falsy(list.children.length);
});
ava_1.default("registers a field", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.registerField("test", "0");
    t.is(F.modelProps.registeredFieldsValues["test"], "0");
    const field = F.getField("test");
    t.is(field.value, "0");
});
ava_1.default("registers and updates a field", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.registerField("test", "0");
    t.is(F.modelProps.registeredFieldsValues["test"], "0");
    F.registerView((app) => {
        const field = app.getField("test");
        return maquette_1.h("div", [
            maquette_1.h("button", { onclick: app.actions.changeState }, ["Load Messages"]),
            maquette_1.h("input", { type: "text", onchange: field.handler, value: field.value.toString() }, []),
            maquette_1.h("div.output", [field.value]),
        ]);
    });
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    const input = proj.query("input");
    t.truthy(input.exists);
    input.simulate.change({ value: "2" });
    t.truthy(F.getField("test").value === "2");
    proj.initialize(F.stateRenderer);
    t.is(proj.query(".output").textContent, "2");
});
ava_1.default("register view async", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    function asyncViewFunction(app) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                // simulate view rendering code being loaded async like from a webpack chunk
                setTimeout(() => {
                    resolve(maquette_1.h("div", [
                        maquette_1.h("ul", app.modelProps.messages.map((x) => maquette_1.h("li", [x.toString()]))),
                    ]));
                }, 50);
            });
        });
    }
    F.registerViewAsync(asyncViewFunction);
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    const list = proj.query("ul");
    t.truthy(list.exists);
});
ava_1.default("registers a route and changes when navigating", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.registerView((app) => {
        return maquette_1.h("div", [
            (!app.modelProps.activeScreen || app.modelProps.activeScreen === SimpleScreens.Home)
                ? maquette_1.h("h1", ["Home Page"])
                : maquette_1.h("h1", ["About Page"]),
        ]);
    });
    F.registerRoute("home", "/home", (name, params, props) => {
        return Object.assign({}, props, { activeScreen: SimpleScreens.Home });
    });
    F.registerRoute("about", "/about", (name, params, props) => {
        return Object.assign({}, props, { activeScreen: SimpleScreens.About });
    });
    t.is(F.getRouteLink("about"), "/about");
    t.false(F.getRouteLink("xyz"));
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    t.is(proj.query("h1").textContent, "Home Page");
    F.navToPath("/about");
    window.dispatchEvent(new Event("popstate"));
    t.is(proj.query("h1").textContent, "About Page");
    F.navToRoute("home");
    window.dispatchEvent(new Event("popstate"));
    t.is(proj.query("h1").textContent, "Home Page");
});
ava_1.default("model props can only be updated through an action", (t) => {
    const F = new frets_1.FRETS(new SimpleProps(), new SimpleActions());
    F.registerView((app) => {
        // try overwriting something in modelProps
        app.modelProps.messages.push("try");
        return maquette_1.h("div", [
            (!app.modelProps.activeScreen || app.modelProps.activeScreen === SimpleScreens.Home)
                ? maquette_1.h("h1", ["Home Page"])
                : maquette_1.h("h1", ["About Page"]),
            maquette_1.h("ul", app.modelProps.messages.map((x) => maquette_1.h("li", [x]))),
        ]);
    });
    t.not(F.modelProps.messages[0], "try");
    const proj = maquette_query_1.createTestProjector(F.stateRenderer);
    const msgs = proj.query("ul>li");
    t.falsy(msgs.exists());
    t.not(F.modelProps.messages[0], "try");
});
//# sourceMappingURL=data:application/json;base64,